<!DOCTYPE html>
<html>

<head>
  <title>Complex Function Plotter</title>
  <link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="style.css">
  <link rel="icon" type="image/png" href="https://jcponce.github.io/assets/img/png/icon/infinity32.png" sizes="32x32">
  <link rel="icon" type="image/png" href="https://jcponce.github.io/assets/img/png/icon/infinity16.png" sizes="16x16">

  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-121691678-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];

    function gtag() {
      dataLayer.push(arguments);
    }
    gtag('js', new Date());

    gtag('config', 'UA-121691678-1');
  </script>


  <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
  <script src="scripts/query-string-helper.js"></script>
  <script src="peg-0.9.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js"></script>

  <style>
    #copyable-link {
      border: 0;
      width: 45%;
      color: white;
      font-size: large;
    }
  </style>


</head>

<body>

  <video id="monitor" autoplay width="256" height="256" style="visibility: hidden; float:left;"></video>
  <canvas id="videoImage" width="256" height="256" style="visibility: hidden; float:left;"></canvas>

  <div id="container">
    <div id="display-area">
    </div>

    <div class="full-width">

      <div id="link-container" style="display: none;">
        <input id="copyable-link" class="dark-translucent input-control" value=""></input>
      </div>

      <a class="dark-translucent input-control" href="https://github.com/jcponce/complex/blob/gh-pages/function-plotter/README.md"
        target="_blank">
        <i id="show-instructions" class="fa fa-question-circle"></i>
      </a>

      <a id="show-link" class="dark-translucent input-control" href="#"><i class="fa fa-external-link"></a></i>

      <input class="dark-translucent input-control" id="equation-input"
        placeholder="e.g. 1 / (z^2 + t * i)^t - z * log(z)" value="(z-1)/(z^2+z+1)"></input>

      <!--
      Some interesting examples
      z * (1 - (t+1)/2) + (t+1)/2 * (z+1/z)
      (z*0.99+0.01*((1-z^(18))*z^2) )*(1+i*t)
      e^(i*0.5*(z-3*i)+log(z-3*i))*(t+1)/2+z*(1-(t+1)/2)
      (z * 3)/2 * e^(t * pi * i * e^( -1 * abs( (z*3)/2 )^2 ))
      (2*(z-1-2.5*i))^(1 - i*0.537)+t
      e^(i*(2.5*r)^5)+t
      -->

      <span id="texture-options">
        <a class="dark-translucent input-control" href="#"><img class="thumbnail" src="images/hsv.png"
            title="Simple"></a>
        <a class="dark-translucent input-control" href="#"><img class="thumbnail" src="images/hsvmod.png"
            title="Modulus"></a>
        <a class="dark-translucent input-control" href="#"><img class="thumbnail" src="images/hsvphase.png"
            title="Phase"></a>
        <a class="dark-translucent input-control" href="#"><img class="thumbnail" src="images/hsvcomb.png"
            title="Combined"></a>
        <a class="dark-translucent input-control" href="index.htm"><img class="thumbnail" src="images/plotfz-2.png"
            title="Texture"></a>
        <!--<a class="dark-translucent input-control" href="#"><i class="fa fa-video-camera"></i></a>-->



      </span>


    </div>

  </div>

  <script src="scripts/webcam-stream.js"></script>

  <script type="peg-grammar" id="complex-expression-peg-grammar">
    /*
   * Complex Arithmetic Grammar
   * (Utilizes http://pegjs.org/ to build a parser based on this grammar)
   */

  {
    function combine(first, rest, combiners) {
      var result = first, i;
      for (i = 0; i < rest.length; i++) {
        result = combiners[rest[i][1]](result, rest[i][3]);
      }
      return result;
    }
  }

  Expression
    = first:Term rest:(_ ("+" / "-") _ Term)* _ {
        return combine(first, rest, {
          "+": function(left, right) { return 'complex_add(' + left + ',' + right + ')'; },
          "-": function(left, right) { return 'complex_sub(' + left + ',' + right + ')'; }
        });
      }

  Term
    = first:Powered rest:(_ ("*" / "/") _ Powered)* {
        return combine(first, rest, {
          "*": function(left, right) { return 'complex_mul(' + left + ',' + right + ')'; },
          "/": function(left, right) { return 'complex_div(' + left + ',' + right + ')'; }
        });
      }

  Powered
    =  _ left:Factor _ "^" _ right:Factor _ { return 'complex_pow(' + left + ',' + right + ')'; }
    / Factor
  // Added a few extra functions by Juan Carlos Ponce Campuzano 12-Nov-2019
  Factor
    = "(" _ expr:Expression _ ")" { return expr; }
    / _ "log"  _ "(" _ arg:Expression _ ")" _ { return 'complex_log(' + arg + ')'; }
    / _ "tan"  _ "(" _ arg:Expression _ ")" _ { return 'complex_tan(' + arg + ')'; }
    / _ "cos"  _ "(" _ arg:Expression _ ")" _ { return 'complex_cos(' + arg + ')'; }
    / _ "sin"  _ "(" _ arg:Expression _ ")" _ { return 'complex_sin(' + arg + ')'; }
    / _ "sec"  _ "(" _ arg:Expression _ ")" _ { return 'complex_sec(' + arg + ')'; }
    / _ "csc"  _ "(" _ arg:Expression _ ")" _ { return 'complex_csc(' + arg + ')'; }
    / _ "cot"  _ "(" _ arg:Expression _ ")" _ { return 'complex_cot(' + arg + ')'; }
    / _ "sech"  _ "(" _ arg:Expression _ ")" _ { return 'complex_sech(' + arg + ')'; }
    / _ "csch"  _ "(" _ arg:Expression _ ")" _ { return 'complex_csch(' + arg + ')'; }
    / _ "coth"  _ "(" _ arg:Expression _ ")" _ { return 'complex_coth(' + arg + ')'; }
    / _ "tanh"  _ "(" _ arg:Expression _ ")" _ { return 'complex_tanh(' + arg + ')'; }
    / _ "cosh"  _ "(" _ arg:Expression _ ")" _ { return 'complex_cosh(' + arg + ')'; }
    / _ "sinh"  _ "(" _ arg:Expression _ ")" _ { return 'complex_sinh(' + arg + ')'; }
    / _ "abs"  _ "(" _ arg:Expression _ ")" _ { return 'complex_abs(' + arg + ')'; }
    / _ "re"  _ "(" _ arg:Expression _ ")" _ { return 'complex_re(' + arg + ')'; }
    / _ "im"  _ "(" _ arg:Expression _ ")" _ { return 'complex_im(' + arg + ')'; }
    / _ "conj"  _ "(" _ arg:Expression _ ")" _ { return 'complex_conj(' + arg + ')'; }
    / _ "iter" _ "(" _ arg:Expression _ "," _ count:PositiveInteger _ ")" _ {
      var n = parseInt(count) - 1, Q = arg;
      for(var it=0; it < n; ++it) {
        Q = Q.replace(/complex\(a,b\)/g, '(' + Q + ')');
      }
      return Q;
    }
    / Complex

  Complex
    = "<" _ a:Real _ "," _ b:Real _ ">" { return 'complex(' + a + ',' + b + ')'; }
    / "-z"     { return 'complex(-a,-b)'; }
    / "z"     { return 'complex(a,b)'; }
    / "i"     { return 'complex(0.0,1.0)'; }
    / a:Real  { return 'complex(' + a + ',0.0)'; }

  Real
    = whole:Integer "." fractional:Integer { return '' + whole + '.' + fractional; }
    / whole:Integer { return '' + whole + '.0'; }
    / "pi" { return '3.14159265359'; }
    / "e" { return '2.7182818284'; }
    / "a" { return 'a'; }
    / "b" { return 'b'; }
    / "theta" { return 'complex_theta(a,b)'; }
    / "t" { return 't'; }
    / "r"     { return 'complex_r(a,b)'; }

  Integer "integer"
    = "-" int:Integer { return "-" + int;}
    / PositiveInteger

  PositiveInteger
    = [0-9]+ { return text(); }

  _ "whitespace"
    = [ \t\n\r]*
  </script>

  <!-- Shaders -->
  <script type="x-shader/x-vertex" id="vertexshader">
    // switch on high precision floats
    precision highp float;

    varying vec2 vUv;
    uniform float t;

		void main()
		{
      vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);
		}
  </script>

  <script type="x-shader/x-fragment" id="fragmentshader">
    precision highp float;

    #define M_PI 3.1415926535897932384626433832795
    #define M_E  2.7182818284590452353602874713526

    #define A x.x
    #define B x.y
    #define C y.x
    #define D y.y

    varying vec2 vUv;
    uniform float t;
    uniform float width, height;
    uniform sampler2D gridTexture;
    uniform float _option;

    // Convert from Hue,Saturation/Value to RGB
    // http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
    vec3 hsv2rgb(vec3 c)
    {
      vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
      vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
      return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
    }

    float arg(vec2 x) { return atan(B,A); }
    
    //New auxiliary functions by Juan Carlos Ponce Campuzano 12-Nov-2019
    
    float sinh( float x ) { return (pow(M_E, x) - pow(M_E, -x))*0.5; }
    float cosh( float x ) { return (pow(M_E, x) + pow(M_E, -x))*0.5; }

    //New auxiliary functions ends
    
    float complex_r(float x, float y) { return length(vec2(x,y)); }
    float complex_theta(float x, float y) { return arg(vec2(x,y)); }
    vec2 complex(float x, float y) { return vec2(x,y); }

    // https://en.wikipedia.org/wiki/Complex_number#Elementary_operations
    vec2 complex_add(vec2 x, vec2 y) { return x + y; }
    vec2 complex_sub(vec2 x, vec2 y) { return x - y; }
    vec2 complex_mul(vec2 x, vec2 y) { return vec2( A*C-B*D, B*C+A*D); }
    vec2 complex_div(vec2 x, vec2 y) { return vec2( (A*C+B*D)/(C*C+D*D), (B*C-A*D)/(C*C+D*D)); }

    // http://www.abecedarical.com/zenosamples/zs_complexnumbers.html
    vec2 complex_pow(vec2 x, vec2 y) {
      float rho = length(x);
      float theta = arg(x);
      float angle = C * theta + D * log(rho);
      float real = cos(angle);
      float imag = sin(angle);
      return vec2(real, imag) * (pow(rho, C) * pow(M_E, -D * theta));
    }

    vec2 complex_sin(vec2 x) {
      vec2 iz = complex_mul(vec2(0.0, 1.0), x);
      vec2 inz = complex_mul(vec2(0.0, -1.0), x);
      vec2 eiz = complex_pow( vec2(M_E, 0.0), iz );
      vec2 einz = complex_pow( vec2(M_E, 0.0), inz );
      return complex_div( eiz - einz, complex(0.0, 2.0));
    }

    vec2 complex_cos(vec2 x) {
      vec2 iz = complex_mul(vec2(0.0, 1.0), x);
      vec2 inz = complex_mul(vec2(0.0, -1.0), x);
      vec2 eiz = complex_pow( vec2(M_E, 0.0), iz );
      vec2 einz = complex_pow( vec2(M_E, 0.0), inz );
      return complex_div( eiz + einz, complex(2.0, 0.0));
    }
    
    vec2 complex_log(vec2 x) {
      return vec2( log( length(x) ), arg(x) );
    }
    
    //New complex functions added by Juan Carlos Ponce Campuzano 12-Nov-2019
    
    vec2 complex_re(vec2 x) {
       vec2 z = complex_mul(vec2(0.5, 0.0), x);
        float real = A;
        float nimag = -B;
        vec2 conjz = complex_mul(vec2(0.5, 0.0), vec2(real, nimag));
        return complex_add( z, conjz );
    }
    
    vec2 complex_im(vec2 x) {
       vec2 z = complex_mul(vec2(0.5, 0.0), x);
       float real = A;
       float nimag = -B;
       vec2 conjz = complex_mul(vec2(0.5, 0.0), vec2(real, nimag));
       vec2 sub = complex_sub( z, conjz );
       return complex_div( sub, vec2(0.0, 1.0) );
    }
    
    vec2 complex_conj(vec2 x) {
        float real = A;
        float nimag = -B;
      return vec2( real, nimag);
    }
    
    vec2 complex_tan(vec2 x) {
        float real = sin(A+A)/(cos(A+A)+cosh(B+B));
        float imag = sinh(B+B)/(cos(A+A)+cosh(B+B));
      return vec2( real, imag);
    }
    
    vec2 complex_csc(vec2 x) {
        float real = (-sin(A)*cosh(B)-sin(A)*cosh(B))/(cos(A+A)-cosh(B+B));
        float imag = (cos(A)*sinh(B)+cos(A)*sinh(B))/(cos(A+A)-cosh(B+B));
      return vec2( real, imag);
    }
    
    vec2 complex_sec(vec2 x) {
        float real = (cos(A)*cosh(B)+cos(A)*cosh(B))/(cos(A+A)+cosh(B+B));
        float imag = (sin(A)*sinh(B)+sin(A)*sinh(B))/(cos(A+A)+cosh(B+B));
      return vec2( real, imag);
    }
    
    vec2 complex_cot(vec2 x) {
        float real = sin(A+A)/(cos(A+A)-cosh(B+B));
        float imag = sinh(B+B)/(cos(A+A)-cosh(B+B));
      return vec2( real, imag);
    }
    
    vec2 complex_sinh(vec2 x) {
        float real = sinh(A)*cos(B);
        float imag = cosh(A)*sin(B);
      return vec2( real, imag);
    }
    
    vec2 complex_cosh(vec2 x) {
        float real = cosh(A)*cos(B);
        float imag = sinh(A)*sin(B);
      return vec2( real, imag);
    }
    
    vec2 complex_tanh(vec2 x) {
        float real = sinh(A+A)/(cosh(A+A)+cos(B+B));
        float imag = sin(B+B)/(cosh(A+A)+cos(B+B));
      return vec2( real, imag);
    }
    
    vec2 complex_csch(vec2 x) {
        float real = (-sinh(A)*cos(B)-sinh(A)*cos(B))/(-cosh(A+A)+cos(B+B));
        float imag = (cosh(A)*sin(B)+cosh(A)*sin(B))/(-cosh(A+A)+cos(B+B));
      return vec2( real, imag);
    }
    
    vec2 complex_sech(vec2 x) {
        float real = (+cosh(A)*cos(B)+cosh(A)*cos(B))/(cosh(A+A)+cos(B+B));
        float imag = (-sinh(A)*sin(B)-sinh(A)*sin(B))/(cosh(A+A)+cos(B+B));
      return vec2( real, imag);
    }
    
    vec2 complex_coth(vec2 x) {
        float real = -sinh(A+A)/(-cosh(A+A)+cos(B+B));
        float imag = -sin(B+B)/(-cosh(A+A)+cos(B+B));
      return vec2( real, imag);
    }

    vec2 complex_abs(vec2 x) {
      return vec2( length(x), 0.0 );
    }
    
    //new functions ends


    bool isNan(float val)
    {
        return (val <= 0.0 || 0.0 <= val) ? false : true;
    }

		void main()
		{
      float a = vUv.x*2.0 - 1.0;
      float b = vUv.y*2.0 - 1.0;
      const float scale = 2.0;

      // Make sure pixels are square
      a *= scale * width / height;
      b *= scale;

      vec2 final_expr = EXPRESSION;

      

      float L = length(final_expr);
      if(isNan(length(final_expr)) || L > 1.0e10) {
        discard;
      }

      // TODO : Make this user-controlled
      if(_option == 0.0) {
        // HSV Domain Coloring
        
        float _arg = (M_PI - atan(final_expr[1], -final_expr[0])) / ( M_PI + M_PI);

        vec3 hsv = vec3(_arg, 1.0, 1.0);
        vec3 rgb = hsv2rgb( hsv );

  			gl_FragColor = vec4(rgb, 1.0);

      } else if(_option == 1.0){
        float l = length(final_expr);
        
        float _r = log(l) / log(2.0);

        _r = 0.6 + 0.35 * ( _r - floor( _r ) );

        float _arg = (M_PI - atan(final_expr[1], -final_expr[0])) / ( M_PI + M_PI);

        vec3 hsv = vec3(_arg, 1.0, _r);
        vec3 rgb = hsv2rgb( hsv );

  			gl_FragColor = vec4(rgb, 1.0);

      } else if(_option == 2.0){
        float l = length(final_expr);
        
        float _r = log(l) / log(2.0);

        _r = 0.6 + 0.35 * ( _r - floor( _r ) );

        float _arg =  (M_PI - atan(final_expr[1], -final_expr[0])) / ( M_PI + M_PI);

        float _c = 0.35 * ( 16.0 * _arg - floor( 16.0 * _arg) ) + 0.7;

        vec3 hsv = vec3(_arg, 1.0, _c);
        vec3 rgb = hsv2rgb( hsv );

  			gl_FragColor = vec4(rgb, 1.0);
      } else if(_option == 3.0){
        float l = length(final_expr);
        
        float _r = log(l) / log(2.0);

        _r = 0.6 + 0.35 * ( _r - floor( _r ) );

        float _arg =  (M_PI - atan(final_expr[1], -final_expr[0])) / ( M_PI + M_PI);

        float _c = 0.35 * ( 16.0 * _arg - floor( 16.0 * _arg) ) + 0.7;

        vec3 hsv = vec3(_arg, 1.0, _c * _r);
        vec3 rgb = hsv2rgb( hsv );

  			gl_FragColor = vec4(rgb, 1.0);
      } else {
        // Texture-based Domain Coloring
        //final_expr = min(vec2(1.0, 1.0), final_expr);
        //final_expr = max(vec2(-1.0, -1.0), final_expr);
        vec4 tex = texture2D(gridTexture, final_expr / (2.0*scale) + vec2(0.5,-0.5));
        gl_FragColor = vec4( tex.xyz, 1.0 );

      }

    }
  </script>

  <script>
    // TODO : Clean this up a bit. It's still pretty messy.

    // Get the starting canvas size
    var WIDTH = $("#display-area").width(),
      HEIGHT = $("#display-area").height();

    // Get the DOM element to attach the render canvas to
    var $container = $("#display-area");

    // Create a WebGL renderer, camera and a scene
    renderer = new THREE.WebGLRenderer();
    camera = new THREE.OrthographicCamera(
      WIDTH / -2,
      WIDTH / 2,
      HEIGHT / 2,
      HEIGHT / -2,
      1,
      10
    );
    scene = new THREE.Scene();

    var uniforms = {
      t: {
        type: "f",
        value: 1.0
      },
      _option: {
        type: "f",
        value: 0.0
      },
      gridTexture: {
        type: "t",
        value: null
      },
      width: {
        type: "f",
        value: WIDTH
      },
      height: {
        type: "f",
        value: HEIGHT
      }
    };

    /*//I don't need this function for domain coloring
    function setTexture(url) {
      //var gridTexture = THREE.ImageUtils.loadTexture(url);
      //gridTexture.wrapS = gridTexture.wrapT = THREE.RepeatWrapping;
      var gridTexture = new THREE.TextureLoader().load( url );
      gridTexture.wrapS = THREE.RepeatWrapping;
      gridTexture.wrapT = THREE.RepeatWrapping;
      gridTexture.repeat.set(2, 2);

      uniforms.gridTexture.value = gridTexture;
    }
    setTexture("images/plotfz-2.png");*/
    

    // the camera starts at 0,0,0 so pull it back
    camera.position.z = 5;
    renderer.setSize(WIDTH, HEIGHT);

    function reset_camera() {
      var WIDTH = $("#display-area").width(),
        HEIGHT = $("#display-area").height();

      // We need to update the uniforms passed to the shader so it can later
      // compute the aspect ratio and maintain square pixels.
      uniforms.width.value = WIDTH;
      uniforms.height.value = HEIGHT;

      renderer.setSize(WIDTH, HEIGHT);
    }

    reset_camera();

    // attach the render-supplied DOM element
    $container.append(renderer.domElement);

    // Produce the Parser based on our grammar
    $(function () {
      window.pegParser = PEG.buildParser(
        $("#complex-expression-peg-grammar").text()
      );
    });

    // Make a full-screen quad and add it to the THREE.js scene
    var plane = new THREE.PlaneBufferGeometry(WIDTH, HEIGHT);
    var quad = new THREE.Mesh(plane, null);
    quad.position.z = 0;
    scene.add(quad);

    // Whenever the user updates the input field, we need to parse and produce a
    // new shader to update what's being displayed.
    function update_expression() {
      var new_expression = $("#equation-input").val();
      var compiledExpression = pegParser.parse(new_expression);
      
      //console.log(compiledExpression);

      var shaderMaterial = new THREE.ShaderMaterial({
        uniforms: uniforms,
        vertexShader: $("#vertexshader").text(),
        fragmentShader: $("#fragmentshader")
          .text()
          .replace("EXPRESSION", compiledExpression)
      });

      quad.material = shaderMaterial;
    }

    // When rendering, we just need to make sure our convenience variables are
    // up-to-date before we render.
    function render() {
      // If we're rendering video, update that.
      if (window.video && video.readyState === video.HAVE_ENOUGH_DATA) {
        videoImageContext.drawImage(
          video,
          0,
          0,
          videoImage.width,
          videoImage.height
        );
        if (videoTexture) videoTexture.needsUpdate = true;
      }

      quad.material.uniforms.t.value = Math.sin(new Date().getTime() * 0.0005);
      quad.material.uniforms.t.needsUpdate = true;
      renderer.render(scene, camera);

      requestAnimationFrame(render);
    }

    // When the user clicks one of the images icon, change the plot
    $("#texture-options a").each(function () {
      $(this).click(function () {
        var texture_path = $(this)
          .find("img")
          .first()
          .attr("src");
        if (texture_path === "images/hsv.png") {
          uniforms._option.value = 0.0;
          //console.log(uniforms._option.value);
          //setTexture(texture_path);
        } else if (texture_path === "images/hsvmod.png") {
          uniforms._option.value = 1.0;
          //console.log(uniforms._option.value);
          //setTexture(texture_path);
        } else if (texture_path === "images/hsvphase.png") {
          uniforms._option.value = 2.0;
          //console.log(uniforms._option.value);
          //setTexture(texture_path);
        } else if (texture_path === "images/hsvcomb.png") {
          uniforms._option.value = 3.0;
          //console.log(uniforms._option.value);
          //setTexture(texture_path);
        } 
        //else {
          // Currently, the only other option here is to stream from the webcam.
         // initWebCam();
        //}
      });
    });

    // When the user presses the button, show some copyable text
    function showLink() {
      var expression_base64 = btoa($("#equation-input").val());

      var url = [location.protocol, "//", location.host, location.pathname].join(
        ""
      );
      url = url + "?expression=" + expression_base64;

      $("#copyable-link").val(url);
      $("#link-container").show();
      $("#copyable-link").select();
    }
    $("#copyable-link").blur(function () {
      $("#link-container").hide();
    });

    // If the user already specified
    $(function () {
      var expression_base64 = getQueryVariable("expression");
      console.log(expression_base64);
      if (expression_base64) {
        $("#equation-input").val(atob(expression_base64.replace("/", "")));
      }
    });

    // Get things started.
    $("#equation-input").change(update_expression);
    $("#show-link").click(showLink);
    $(window).resize(reset_camera);
    $(update_expression);
    $(render);
  </script>

</body>

</html>